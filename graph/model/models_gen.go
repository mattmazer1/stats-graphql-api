// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type UserInfo interface {
	IsUserInfo()
	GetID() string
	GetUsername() string
	GetPassword() string
}

type InputPlayer struct {
	Pos        Position    `json:"pos"`
	Name       string      `json:"name"`
	Age        int         `json:"age"`
	Experience int         `json:"experience"`
	Stats      *InputStats `json:"stats"`
}

type InputStats struct {
	Season    string  `json:"season"`
	Points    float64 `json:"points"`
	ThreePt   float64 `json:"threePt"`
	Rebounds  float64 `json:"rebounds"`
	Assists   float64 `json:"assists"`
	Steals    float64 `json:"steals"`
	Blocks    float64 `json:"blocks"`
	TurnOvers float64 `json:"turnOvers"`
	Mp        float64 `json:"mp"`
}

type InputUpdatePlayer struct {
	Pos        *Position         `json:"pos"`
	Name       *string           `json:"name"`
	Age        *int              `json:"age"`
	Experience *int              `json:"experience"`
	Stats      *InputUpdateStats `json:"stats"`
}

type InputUpdateStats struct {
	Season    *string  `json:"season"`
	Points    *float64 `json:"points"`
	ThreePt   *float64 `json:"threePt"`
	Rebounds  *float64 `json:"rebounds"`
	Assists   *float64 `json:"assists"`
	Steals    *float64 `json:"steals"`
	Blocks    *float64 `json:"blocks"`
	TurnOvers *float64 `json:"turnOvers"`
	Mp        *float64 `json:"mp"`
}

type InputUser struct {
	Username string `json:"username"`
	Password string `json:"password"`
}

type Player struct {
	Pos        Position `json:"pos"`
	Name       string   `json:"name"`
	Age        int      `json:"age"`
	Experience int      `json:"experience"`
	Stats      *Stats   `json:"stats"`
}

type Stats struct {
	Season    string  `json:"season"`
	Points    float64 `json:"points"`
	ThreePt   float64 `json:"threePt"`
	Rebounds  float64 `json:"rebounds"`
	Assists   float64 `json:"assists"`
	Steals    float64 `json:"steals"`
	Blocks    float64 `json:"blocks"`
	TurnOvers float64 `json:"turnOvers"`
	Mp        float64 `json:"mp"`
}

type Token struct {
	Token string `json:"token"`
}

type UpdatePassword struct {
	ID          *string `json:"id"`
	Username    string  `json:"username"`
	NewPassword string  `json:"newPassword"`
}

type UpdateUsername struct {
	ID          *string `json:"id"`
	OldUsername string  `json:"oldUsername"`
	NewUsername string  `json:"newUsername"`
}

type User struct {
	ID       string `json:"id"`
	Username string `json:"username"`
	Password string `json:"password"`
}

func (User) IsUserInfo()              {}
func (this User) GetID() string       { return this.ID }
func (this User) GetUsername() string { return this.Username }
func (this User) GetPassword() string { return this.Password }

type Position string

const (
	PositionGuard   Position = "guard"
	PositionForward Position = "forward"
	PositionCenter  Position = "center"
)

var AllPosition = []Position{
	PositionGuard,
	PositionForward,
	PositionCenter,
}

func (e Position) IsValid() bool {
	switch e {
	case PositionGuard, PositionForward, PositionCenter:
		return true
	}
	return false
}

func (e Position) String() string {
	return string(e)
}

func (e *Position) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Position(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid POSITION", str)
	}
	return nil
}

func (e Position) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
